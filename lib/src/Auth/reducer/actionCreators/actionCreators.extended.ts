// This file has been generated by reducer-gen (@Stefan Pauka) written in 2020.

import IAuthService from "../../../interfaces/IAuthService";
import { UserInfo } from "../../../interfaces/UserInfo";
import extendedActions from "./../actions/action.extended";
import ExtenedReducerAction from "./../reducerActions/reducerActions.extended";

/**
 * You may add here extending actionCreators for this features reducer
 * actionCreator: ([params]): ExtenedReducerAction => (
 * {
 *   type: extendedActions["[actionName]"],
 *   [payload]
 * }),
 *
 */
export const extendedActionCreators = {
    setAuthService(
        provider: string,
        next: IAuthService | undefined | null
    ): ExtenedReducerAction {
        return {
            type: extendedActions.SET_AUTH_PROVIDER_SERVICE,
            next,
            provider,
        };
    },
    setUser(
        provider: string,
        next: UserInfo | undefined | null
    ): ExtenedReducerAction {
        return {
            type: extendedActions.SET_AUTH_USER,
            next,
            provider,
        };
    },
};

type ActionCreator = {
    [key in string]: (...params: any[]) => ExtenedReducerAction;
};

const checkActionCreator: <T>(item: T & ActionCreator) => T = <T>(
    item: T & ActionCreator
) => {
    return item;
};

export const authActionCreatorsExtended = checkActionCreator(
    extendedActionCreators
);

export default authActionCreatorsExtended;
